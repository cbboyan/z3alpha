(set-logic UF)
(declare-sort $$unsorted 0)
(declare-fun tptp.v3_ordinal1 ($$unsorted) Bool)
(declare-fun tptp.k1_xboole_0 () $$unsorted)
(declare-fun tptp.k2_ordinal2 ($$unsorted) $$unsorted)
(assert (not (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (= (tptp.k2_ordinal2 A) tptp.k1_xboole_0)))))
(declare-fun tptp.r2_hidden ($$unsorted $$unsorted) Bool)
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (=> (tptp.r2_hidden A B) (not (tptp.r2_hidden B A))))))
(declare-fun tptp.v1_ordinal1 ($$unsorted) Bool)
(declare-fun tptp.v2_ordinal1 ($$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (and (tptp.v1_ordinal1 A) (tptp.v2_ordinal1 A)))))
(assert (forall ((A $$unsorted)) (=> (and (tptp.v1_ordinal1 A) (tptp.v2_ordinal1 A)) (tptp.v3_ordinal1 A))))
(declare-fun tptp.m1_subset_1 ($$unsorted $$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (forall ((B $$unsorted)) (=> (tptp.m1_subset_1 B A) (tptp.v3_ordinal1 B))))))
(declare-fun tptp.v1_xboole_0 ($$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v1_xboole_0 A) (tptp.v3_ordinal1 A))))
(declare-fun tptp.v5_ordinal1 ($$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v1_xboole_0 A) (tptp.v5_ordinal1 A))))
(assert (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (forall ((B $$unsorted)) (=> (tptp.m1_subset_1 B A) (tptp.v3_ordinal1 B))))))
(declare-fun tptp.v7_ordinal1 ($$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v7_ordinal1 A) (tptp.v3_ordinal1 A))))
(assert (forall ((A $$unsorted)) (=> (tptp.v1_xboole_0 A) (tptp.v7_ordinal1 A))))
(declare-fun tptp.v6_ordinal1 ($$unsorted) Bool)
(assert (forall ((A $$unsorted)) (=> (tptp.v1_xboole_0 A) (tptp.v6_ordinal1 A))))
(declare-fun tptp.k1_setfam_1 ($$unsorted) $$unsorted)
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (let ((_let_1 (= B (tptp.k1_setfam_1 A)))) (let ((_let_2 (= A tptp.k1_xboole_0))) (and (=> (not _let_2) (= _let_1 (forall ((C $$unsorted)) (= (tptp.r2_hidden C B) (forall ((D $$unsorted)) (=> (tptp.r2_hidden D A) (tptp.r2_hidden C D))))))) (=> _let_2 (= _let_1 (= B tptp.k1_xboole_0)))))))))
(declare-fun tptp.k2_ordinal1 ($$unsorted) $$unsorted)
(assert (forall ((A $$unsorted)) (= (tptp.k2_ordinal2 A) (tptp.k1_setfam_1 (tptp.k2_ordinal1 A)))))
(declare-fun tptp.o_0_0_xboole_0 () $$unsorted)
(assert (= tptp.k1_xboole_0 tptp.o_0_0_xboole_0))
(assert true)
(assert true)
(assert true)
(assert (forall ((A $$unsorted)) (tptp.v3_ordinal1 (tptp.k2_ordinal2 A))))
(assert true)
(assert (tptp.v1_xboole_0 tptp.o_0_0_xboole_0))
(assert (forall ((A $$unsorted)) (exists ((B $$unsorted)) (tptp.m1_subset_1 B A))))
(assert (tptp.v1_xboole_0 tptp.k1_xboole_0))
(assert (exists ((A $$unsorted)) (tptp.v3_ordinal1 A)))
(assert (exists ((A $$unsorted)) (tptp.v1_xboole_0 A)))
(assert (exists ((A $$unsorted)) (and (not (tptp.v1_xboole_0 A)) (tptp.v1_ordinal1 A) (tptp.v2_ordinal1 A) (tptp.v3_ordinal1 A))))
(assert (exists ((A $$unsorted)) (not (tptp.v1_xboole_0 A))))
(assert (exists ((A $$unsorted)) (tptp.v7_ordinal1 A)))
(assert (exists ((A $$unsorted)) (and (not (tptp.v1_xboole_0 A)) (tptp.v7_ordinal1 A))))
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (=> (tptp.r2_hidden A B) (tptp.m1_subset_1 A B)))))
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (=> (tptp.m1_subset_1 A B) (or (tptp.v1_xboole_0 B) (tptp.r2_hidden A B))))))
(assert (forall ((A $$unsorted)) (=> (tptp.r2_hidden tptp.k1_xboole_0 A) (= (tptp.k1_setfam_1 A) tptp.k1_xboole_0))))
(assert (forall ((A $$unsorted)) (=> (tptp.v1_xboole_0 A) (= A tptp.k1_xboole_0))))
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (not (and (tptp.r2_hidden A B) (tptp.v1_xboole_0 B))))))
(assert (forall ((A $$unsorted)) (forall ((B $$unsorted)) (not (and (tptp.v1_xboole_0 A) (not (= A B)) (tptp.v1_xboole_0 B))))))
(assert (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (= (tptp.k2_ordinal1 A) A))))
(assert (forall ((A $$unsorted)) (=> (tptp.v3_ordinal1 A) (=> (not (= A tptp.k1_xboole_0)) (tptp.r2_hidden tptp.k1_xboole_0 A)))))
(set-info :filename t9_ordinal3)
(check-sat-assuming ( true ))
